{"mappings":"AA6MgB,IAAIA,SAAQ,SAACC,EAASC,GACrBC,KAAKC,SACP,GACXH,EAAQ,OAERC,EAAO,K","sources":["src/js/03-promises.js"],"sourcesContent":["// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('resolve');\n//     }\n//     reject('reject');\n//   }, 2000);\n// });\n//------------------------------------\n// promise.then(\n//   result => {\n//   console.log(`✅ Fulfilled promise ${result}`);\n// },\n//   error => {\n//     console.log(`❌ Rejected promise ${error}`);\n// });\n//----------------------------------------------\n// promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled');\n//   console.log(`✅ Fulfilled promise ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected');\n//   console.log(`❌ Rejected promise ${error}`);\n// }\n\n// promise\n//   .then(onFulfilled)\n//   .then(x => {\n//     console.log(x);\n//     // throw new Error('bag');\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('I will anyway'));\n//////////////////////////////////////////////////////////////\n// const makeOrder = dish => {\n//   const DELAY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve(`✅ It's your ${dish}`);\n//       }\n//       reject('❌ Sorry, out of products');\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('slice').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// };\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n///////////////////////////////////////////\n\n// const makeOrder = dish => {\n//   return Promise.resolve(`✅ It's your ${dish}`);\n// };\n\n// makeOrder('slice').then(onMakeOrderSuccess);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n//////////////////////////////////////////\n// function fetch (url) {\n// return new Promise(...)\n// }\n\n// const fetchPokemonById = id => {\n//   return fetch(`https:/pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());\n// };\n\n// fetchPokemonById(1).then(onFatchSuccess).then(onFatchError);\n// fetchPokemonById(2).then(onFatchSuccess).then(onFatchError);\n// fetchPokemonById(3).then(onFatchSuccess).then(onFatchError);\n\n// function onFatchSuccess(pokemon) {\n//   console.log('onFatchSuccess');\n//   console.log(pokemon);\n// }\n\n// function onFatchError(error) {\n//   console.log('onFatchError');\n//   console.log(error);\n// }\n\n////////////////////////////////////////////////////////\n\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('✅ resolve');\n//       }\n//       reject('❌ reject');\n//     });\n//     })\n\n// };\n\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\n\n////////////////////////////////////////////////////////\n\n// const horses = [\n//   'Secretariat',\n//   'Eclipse',\n//   'West Australian',\n//   'Flaying Fox',\n//   'Seabiscuit',\n// ];\n\n// console.log('%c The race has started', 'color: brown; font-size: 14px;');\n\n// const promisesCollection = horses.map(race);\n// // console.log(promisesCollection);\n\n// Promise.race(promisesCollection).then(({ horse, time }) => {\n//   console.log(\n//     `%c Won ${horse}, finished in ${time} time`,\n//     'color:green; font-size: 14px'\n//   );\n// });\n\n// Promise.all(promisesCollection).then(() => {\n//   console.log('%c Check in is over', 'color: blue; font-size: 14px');;\n// });\n\n// function race(horse) {\n//   return new Promise(resolve => {\n//     const time = getRandomTime(2000, 3500);\n//     setTimeout(() => {\n//       resolve({ horse, time });\n//     }, time);\n//   });\n// }\n\n// function getRandomTime(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// }\n\n/////////////////////////////////////////////////////////////\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// };\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n////////////\n// Why undefined???\n// const promise = new Promise(resolve => {\n//   resolve(10);\n// });\n\n// promise\n//   .then(value => {\n//     new Promise(resolve => {\n//       resolve(value * 2);\n//     });\n//   })\n//   .then(value => console.log(value));\n///////////////////////////////////////////////\n\nconst promise = new Promise((resolve, reject) => {\n  const random = Math.random();\n  if (random > 0.5) {\n    resolve('Yes');\n  } else {\n    reject('No');\n  }\n});\n"],"names":["Promise","resolve","reject","Math","random"],"version":3,"file":"03-promises.5dec25d4.js.map"}