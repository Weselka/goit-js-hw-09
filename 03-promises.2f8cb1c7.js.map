{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KA9CM,CACXQ,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAgCC,GAC9BA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBd,MAAOkB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACfC,EAAW,CACfpB,MAAOiB,EAAMI,MACbH,KAAMA,EAAKG,MACXF,OAAQA,EAAOE,OAEbC,EAAUC,OAAOH,EAASpB,OAC1BwB,EAASD,OAAOH,EAASF,MACzBO,EAAWF,OAAOH,EAASD,QAE/B,GAAIG,EAAU,GAAKE,EAAS,GAAKC,EAAW,EAE1C,YADA7B,EAAA8B,OAAOC,QAAQ,yBAIjB,IAAK,IAAIC,EAAW,EAAGA,GAAYH,EAAUG,GAAY,EACvD9B,EAAc8B,EAAUN,GACrBO,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MACjBJ,EAAA8B,OAAOK,QAAQ,uBAAwCC,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,M,IAE9DiC,OAAM,SAAAH,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MAClBJ,EAAA8B,OAAOC,QAAQ,sBAAqCK,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,M,IAE9DsB,GAAWE,EAGbZ,EAAMG,cAAcmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onSubmitCreatePromises);\n\nfunction onSubmitCreatePromises(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  const dataForm = {\n    delay: delay.value,\n    step: step.value,\n    amount: amount.value,\n  };\n  let delayEl = Number(dataForm.delay);\n  let stepEl = Number(dataForm.step);\n  let amountEl = Number(dataForm.amount);\n\n  if (delayEl < 0 || stepEl < 0 || amountEl < 0) {\n    Notify.failure('Data must be positive');\n    return;\n  }\n\n  for (let position = 1; position <= amountEl; position += 1) {\n    createPromise(position, delayEl)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayEl += stepEl;\n  }\n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","dataForm","value","delayEl","Number","stepEl","amountEl","Notify","failure","position1","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.2f8cb1c7.js.map"}