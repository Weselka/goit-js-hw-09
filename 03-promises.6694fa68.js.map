{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EA9CA,CACXQ,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAgCC,GAC9BA,EAAMC,iBACN,MAAQb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SAC9CC,EAAW,CACfnB,MAAOc,EAAMM,MACbL,KAAMA,EAAKK,MACXJ,OAAQA,EAAOI,OAEjB,IAAIC,EAAUC,OAAOH,EAASnB,OAC1BuB,EAASD,OAAOH,EAASJ,MACzBS,EAAWF,OAAOH,EAASH,QAE/B,GAAIK,EAAU,GAAKE,EAAS,GAAKC,EAAW,EAE1C,YADA5B,EAAA6B,OAAOC,QAAQ,yBAIjB,IAAK,IAAIC,EAAW,EAAGA,GAAYH,EAAUG,GAAY,EACvD7B,EAAc6B,EAAUb,GACrBc,MAAK,EAAC7B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA6B,OAAOI,QAAQ,uBAAqB9B,QAAiBC,MAAU,IAEhE8B,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA6B,OAAOC,QAAQ,sBAAoB3B,QAAeC,MAAU,IAEhEqB,GAAWE,EAGbX,EAAMK,cAAcc,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onSubmitCreatePromises);\n\nfunction onSubmitCreatePromises(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  const dataForm = {\n    delay: delay.value,\n    step: step.value,\n    amount: amount.value,\n  };\n  let delayEl = Number(dataForm.delay);\n  let stepEl = Number(dataForm.step);\n  let amountEl = Number(dataForm.amount);\n\n  if (delayEl < 0 || stepEl < 0 || amountEl < 0) {\n    Notify.failure('Data must be positive');\n    return;\n  }\n\n  for (let position = 1; position <= amountEl; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayEl += stepEl;\n  }\n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","dataForm","value","delayEl","Number","stepEl","amountEl","Notify","failure","position1","then","success","catch","reset"],"version":3,"file":"03-promises.6694fa68.js.map"}